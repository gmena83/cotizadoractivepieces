{
  "created": "1756946561038",
  "updated": "1756946561038",
  "name": "Cotizador 2.1",
  "description": "",
  "tags": [],
  "pieces": [
    "@activepieces/piece-forms",
    "@activepieces/piece-google-gemini",
    "@activepieces/piece-perplexity-ai",
    "@activepieces/piece-openai",
    "@activepieces/piece-pdf-co",
    "@activepieces/piece-claude",
    "@activepieces/piece-slack",
    "@activepieces/piece-google-sheets",
    "@activepieces/piece-gmail"
  ],
  "template": {
    "displayName": "Cotizador 2.1",
    "trigger": {
      "name": "trigger",
      "valid": true,
      "displayName": "User request",
      "type": "PIECE_TRIGGER",
      "settings": {
        "propertySettings": {
          "botName": {
            "type": "MANUAL"
          }
        },
        "pieceName": "@activepieces/piece-forms",
        "pieceVersion": "~0.4.9",
        "input": {
          "botName": "Don Menatech"
        },
        "triggerName": "chat_submission"
      },
      "nextAction": {
        "name": "step_1",
        "skip": false,
        "type": "PIECE",
        "valid": true,
        "settings": {
          "input": {
            "markdown": "Your request has been recieved! The proposal will arrive in the next 24hrs to your email. "
          },
          "pieceName": "@activepieces/piece-forms",
          "actionName": "return_response",
          "pieceVersion": "~0.4.9",
          "propertySettings": {
            "file": {
              "type": "MANUAL"
            },
            "markdown": {
              "type": "MANUAL"
            }
          },
          "sampleDataSettings": {
            "lastTestDate": "2025-08-27T13:06:04.015Z",
            "sampleDataFileId": "A3PzipOdxoHtHrxdRWBPz"
          },
          "errorHandlingOptions": {
            "retryOnFailure": {
              "value": false
            },
            "continueOnFailure": {
              "value": false
            }
          }
        },
        "nextAction": {
          "name": "step_7",
          "skip": false,
          "type": "CODE",
          "valid": true,
          "settings": {
            "input": {
              "payload": "{{trigger}}"
            },
            "sourceCode": {
              "code": "// step_7 v2 — Parse client identity AND generate project title (Handles stringified JSON)\n// Input props:  payload: object|string   (e.g., {{trigger.body}})\n// Output:\n// {\n//   nombre_cliente: string|null,\n//   apellido_cliente: string|null,\n//   email_cliente: string|null,\n//   empresa_cliente: string|null,\n//   titulo_proyecto: string\n// }\n\n// --- Helper Functions (no need to change) ---\nfunction toStr(v) { return typeof v === 'string' ? v : v == null ? '' : JSON.stringify(v); }\nfunction normNL(s) { return s.replace(/\\r\\n/g, '\\n'); }\nfunction cleanAll(s) { return normNL(s).trim(); }\nfunction titleCase(s) { return s.split(/\\s+/).map(w => w ? w[0].toUpperCase() + w.slice(1).toLowerCase() : '').join(' ').trim(); }\nfunction squeeze(s) { return s.replace(/\\s+/g, ' ').trim(); }\nfunction escapeRe(s) { return s.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); }\n\nfunction findLabeledLine(text, labels) {\n  const lab = labels.map(l => escapeRe(l)).join('|');\n  const re = new RegExp(`^(?:\\\\s*(?:${lab})\\\\s*[:\\\\-–—]\\\\s*)(.+)$`, 'gmi');\n  let m;\n  while ((m = re.exec(text)) !== null) {\n    const v = m[1]?.trim();\n    if (v) return v.replace(/\\s+$/,'');\n  }\n  return null;\n}\n\nfunction extractEmailAnywhere(text) {\n  const m = text.match(/[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}/i);\n  return m ? m[0] : null;\n}\n\nfunction splitFullName(full) {\n  const parts = full.trim().split(/\\s+/).filter(Boolean);\n  if (!parts.length) return { first: null, last: null };\n  if (parts.length === 1) return { first: titleCase(parts[0]), last: null };\n  return { first: titleCase(parts[0]), last: titleCase(parts.slice(1).join(' ')) };\n}\n\n// --- Main Logic ---\nexport const code = async (inputs) => {\n  const inVal = inputs?.payload;\n  let dataObject = null;\n\n  // 1. Robustly parse the input: could be an object or a stringified JSON\n  if (typeof inVal === 'string') {\n    try {\n      dataObject = JSON.parse(inVal);\n    } catch (e) {\n      // It's not a JSON string, so treat the whole thing as the message\n      dataObject = { message: inVal };\n    }\n  } else if (inVal && typeof inVal === 'object') {\n    // It's already an object\n    dataObject = inVal;\n  }\n\n  // Fallback if input is completely empty or invalid\n  if (!dataObject) {\n    return {\n      nombre_cliente: null,\n      apellido_cliente: null,\n      email_cliente: null,\n      empresa_cliente: null,\n      titulo_proyecto: 'Proyecto de IA (Datos no encontrados)',\n    };\n  }\n  \n  const messageRaw = toStr(dataObject.message || '');\n  const msg = cleanAll(messageRaw);\n  \n  if (!msg) {\n    return {\n      nombre_cliente: null,\n      apellido_cliente: null,\n      email_cliente: null,\n      empresa_cliente: null,\n      titulo_proyecto: 'Proyecto de IA (Datos no encontrados)',\n    };\n  }\n\n  // 2. Extract client data from the message\n  const firstNameLine = findLabeledLine(msg, [\"Client's Name\", \"Client Name\", \"Name\", \"Nombre\", \"Nombre del cliente\"]);\n  const lastNameLine = findLabeledLine(msg, [\"Last name\", \"Last Name\", \"Apellido\", \"Apellidos\"]);\n  const companyLine = findLabeledLine(msg, [\"Company\", \"Empresa\", \"Compañía\"]);\n  const emailLine = findLabeledLine(msg, [\"Email\", \"E-mail\", \"Correo\", \"Correo electrónico\"]);\n\n  let email = emailLine || extractEmailAnywhere(msg);\n  \n  let firstName = null;\n  let lastName = null;\n\n  if (firstNameLine && !lastNameLine) {\n    const guess = splitFullName(firstNameLine);\n    firstName = guess.first;\n    lastName = guess.last;\n  } else {\n    firstName = firstNameLine ? titleCase(squeeze(firstNameLine)) : null;\n    lastName  = lastNameLine ? titleCase(squeeze(lastNameLine)) : null;\n  }\n\n  const company = companyLine ? squeeze(companyLine) : null;\n\n  // 3. Generate the project title\n  const projectTitle = company ? `Proyecto de IA para ${company}` : 'Proyecto de IA';\n\n  // 4. Return the clean, 5-field object\n  return {\n    nombre_cliente: firstName,\n    apellido_cliente: lastName,\n    email_cliente: email,\n    empresa_cliente: company,\n    titulo_proyecto: projectTitle,\n  };\n};",
              "packageJson": "{}"
            },
            "propertySettings": {
              "payload": {
                "type": "MANUAL"
              }
            },
            "sampleDataSettings": {
              "lastTestDate": "2025-08-28T17:07:35.438Z",
              "sampleDataFileId": "WR2p39fdNsvMIHWA9f5XY"
            },
            "errorHandlingOptions": {
              "retryOnFailure": {
                "value": true
              },
              "continueOnFailure": {
                "value": false
              }
            }
          },
          "nextAction": {
            "name": "step_17",
            "skip": false,
            "type": "CODE",
            "valid": true,
            "settings": {
              "input": {},
              "sourceCode": {
                "code": "export const code = async (inputs: {}) => {\n  // Get today's date\n  const today = new Date();\n\n  // Format it into a nice string like \"August 23, 2025\"\n  const options: Intl.DateTimeFormatOptions = {\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric'\n  };\n  const formattedDate = today.toLocaleDateString('en-US', options);\n\n  // Return the date so other steps can use it\n  return {\n    current_date: formattedDate\n  };\n};",
                "packageJson": "{}"
              },
              "propertySettings": {},
              "sampleDataSettings": {
                "lastTestDate": "2025-08-27T13:06:30.132Z",
                "sampleDataFileId": "2vGmqiqTKlkYB1CxtjhQX"
              },
              "errorHandlingOptions": {
                "retryOnFailure": {
                  "value": true
                },
                "continueOnFailure": {
                  "value": false
                }
              }
            },
            "nextAction": {
              "name": "step_2",
              "skip": false,
              "type": "PIECE",
              "valid": true,
              "settings": {
                "input": {
                  "auth": "{{connections['7UyEOcBImqZK15GkB3YUF']}}",
                  "model": "gemini-2.5-pro",
                  "prompt": "ROLE: You are a senior delivery manager creating a deterministic Work Plan for a client project.\nSTYLE: Technical, concise, free of marketing fluff and emojis.\nCONTEXT (trusted):{{trigger['message']}}\nCurrent date: {{step_17['current_date']}}\nclient's company: {{step_7['empresa_cliente']}} (Do a search for the client's website and basic information to adapt the style, mission and vision into the whole process).\n\nHARD RULES (read carefully and follow exactly):\nReturn a bare JSON object only. The first character of your response must be { and the last character must be }.\nDo not include backticks, code fences, markdown, comments, or any text before or after the JSON.\nAll required fields below must be present. Use empty arrays [] where information is unknown; never invent URLs, statistics, or sources.\nLanguage for every string must be \"{{context.language}}\". If missing, default to \"es\".\nKeep output concise and deterministic. Prefer short, specific phrases over prose.\nOUTPUT JSON SCHEMA (use these exact keys and types):\nexpertDescription: string\nWorkPlan: array of objects (3–6 items). Each object has:\nphaseNumber: number\nphaseName: string\nobjectives: string[]\ndeliverables: string[]\ntasks: string[] (4–8 tasks per phase)\nownerRoles: string[]\ndurationDays: number\ndependencies: string[]\nrisks: string[]\nmitigations: string[]\nTechStack: string[] (prefer minimal-ops choices; avoid vendor lock-in unless justified)\nInputsRequired: string[]\nAssumptions: string[]\nExclusions: string[]\nAcceptanceCriteria: string[] (include non-functional targets)\nSuccessMetrics: string[]\nEstimatedEffort: object\noverallLevel: string (\"S\" | \"M\" | \"L\")\nbyRole: array of objects [{ role: string, hours: number }]\nCONSTRAINTS:\nPhases: 3–6 total; each with 4–8 tasks.\ndurationDays per phase ≤ (({{context.timeframeWeeks}} or 8) × 7).\nTechStack must align to objectives; if introducing multiple runtimes or specialized vector stores, add a justification in Assumptions.\nPrefer a single backend runtime and a built-in vector extension (e.g., PostgreSQL with pgvector) unless there is a clear reason not to.\nIf {{context.budgetRange}} exists, keep EstimatedEffort realistic for that budget and timeframe.\nNON-FUNCTIONAL REQUIREMENTS (embed as items in AcceptanceCriteria and/or SuccessMetrics):\nPerformance: p95 response time ≤ 2s at stated expected concurrency (specify a number, e.g., 50 users).\nAvailability: monthly uptime ≥ 99.5% with rollback playbook defined.\nQuality: UAT passes with 0 critical/blocker defects; automated tests cover core flows.\nSecurity: RBAC enforced; short-TTL tokens; secrets managed via KMS/Secret Manager; audit logs for access to sensitive data; SAST/DAST executed.\nObservability: structured logs, metrics, and traces available; dashboards for errors/latency.\nData: backup/restore procedure tested; retention policy stated if PII exists.\nRETURN:\nReturn only the bare JSON object described above. No headings, no explanations, no backticks, no extra characters."
                },
                "pieceName": "@activepieces/piece-google-gemini",
                "actionName": "chat_gemini",
                "pieceVersion": "~0.0.17",
                "propertySettings": {
                  "auth": {
                    "type": "MANUAL"
                  },
                  "model": {
                    "type": "MANUAL"
                  },
                  "prompt": {
                    "type": "MANUAL"
                  }
                },
                "sampleDataSettings": {
                  "lastTestDate": "2025-08-27T22:18:06.301Z",
                  "sampleDataFileId": "yUe1EMF1Q9NUbYbVI5MZd"
                },
                "errorHandlingOptions": {
                  "retryOnFailure": {
                    "value": true
                  },
                  "continueOnFailure": {
                    "value": false
                  }
                }
              },
              "nextAction": {
                "name": "step_4",
                "skip": false,
                "type": "CODE",
                "valid": true,
                "settings": {
                  "input": {
                    "executionPlanRaw": "{{step_2['response']}}"
                  },
                  "sourceCode": {
                    "code": "type Phase = {\nphaseNumber: number; phaseName: string; objectives: string[]; deliverables: string[];\ntasks: string[]; ownerRoles: string[]; durationDays: number; dependencies: string[];\nrisks: string[]; mitigations: string[];\n};\ntype EffortByRole = { role: string; hours: number };\ntype WorkPlanDoc = {\nexpertDescription: string;\nWorkPlan: Phase[];\nTechStack: string[];\nInputsRequired: string[];\nAssumptions: string[];\nExclusions: string[];\nAcceptanceCriteria: string[];\nSuccessMetrics: string[];\nEstimatedEffort: { overallLevel: string; byRole: EffortByRole[] };\n};\n\nfunction fmtErr(e: unknown) {\nconst any = e as any;\nreturn {\nok: false,\nerror: any?.message ?? String(e),\nerrorCode: any?.code ?? null,\n};\n}\n\nfunction toStr(x: unknown): string {\nif (typeof x === 'string') return x;\ntry { return JSON.stringify(x ?? ''); } catch { return String(x ?? ''); }\n}\n\nfunction stripOneFence(s: string): string {\nconst m1 = s.match(/^\\s*json\\s*([\\s\\S]*?)\\s*\\s*$/i);\nif (m1) return m1[1];\nconst m2 = s.match(/^\\s*\\s*([\\s\\S]*?)\\s*\\s*$/);\nif (m2) return m2[1];\nreturn s;\n}\n\nfunction extractJson(s: string) {\nconst candidates: string[] = [];\ncandidates.push(s.trim());\ncandidates.push(stripOneFence(s).trim());\n\nconst mFenceJson = s.match(/json\\s*([\\s\\S]*?)\\s*/i);\nif (mFenceJson) candidates.push(mFenceJson[1].trim());\nconst mFenceAny = s.match(/\\s*([\\s\\S]*?)\\s*/);\nif (mFenceAny) candidates.push(mFenceAny[1].trim());\n\n// Balanced braces (first top-level object)\nlet depth = 0, start = -1;\nfor (let i = 0; i < s.length; i++) {\nconst ch = s[i];\nif (ch === '{') { if (depth === 0) start = i; depth++; }\nelse if (ch === '}') { depth--; if (depth === 0 && start !== -1) { candidates.push(s.slice(start, i + 1)); break; } }\n}\n\nconst seen = new Set<string>();\nfor (const c of candidates) {\nif (!c || seen.has(c)) continue;\nseen.add(c);\ntry { return { parsed: JSON.parse(c), raw: c }; } catch { /* try next */ }\n}\n\n// Sometimes LLM wraps under { response: \" ...json...\" }\ntry {\nconst obj = JSON.parse(stripOneFence(s));\nconst inner = (obj && typeof (obj as any).response === 'string') ? stripOneFence((obj as any).response) : '';\nif (inner) {\nconst p = JSON.parse(inner);\nreturn { parsed: p, raw: inner };\n}\n} catch { /* ignore */ }\n\nreturn { error: 'Unable to parse JSON from input (no valid object found).' };\n}\n\nfunction asNum(x: any, d = 0) { const n = typeof x === 'number' ? x : Number(x); return Number.isFinite(n) ? n : d; }\nfunction cleanStrArray(x: any): string[] {\nif (!Array.isArray(x)) return [];\nconst out = x.map(v => (typeof v === 'string' ? v.trim() : String(v))).filter(Boolean);\nreturn Array.from(new Set(out));\n}\n\nfunction normalize(doc: any): WorkPlanDoc {\nconst phases: Phase[] = Array.isArray(doc?.WorkPlan) ? doc.WorkPlan.map((p: any) => ({\nphaseNumber: asNum(p?.phaseNumber, 0),\nphaseName: typeof p?.phaseName === 'string' ? p.phaseName : '',\nobjectives: cleanStrArray(p?.objectives),\ndeliverables: cleanStrArray(p?.deliverables),\ntasks: cleanStrArray(p?.tasks),\nownerRoles: cleanStrArray(p?.ownerRoles),\ndurationDays: asNum(p?.durationDays, 0),\ndependencies: cleanStrArray(p?.dependencies),\nrisks: cleanStrArray(p?.risks),\nmitigations: cleanStrArray(p?.mitigations),\n})) : [];\n\nreturn {\nexpertDescription: typeof doc?.expertDescription === 'string' ? doc.expertDescription : '',\nWorkPlan: phases,\nTechStack: cleanStrArray(doc?.TechStack),\nInputsRequired: cleanStrArray(doc?.InputsRequired),\nAssumptions: cleanStrArray(doc?.Assumptions),\nExclusions: cleanStrArray(doc?.Exclusions),\nAcceptanceCriteria: cleanStrArray(doc?.AcceptanceCriteria),\nSuccessMetrics: cleanStrArray(doc?.SuccessMetrics),\nEstimatedEffort: {\noverallLevel: typeof doc?.EstimatedEffort?.overallLevel === 'string' ? doc.EstimatedEffort.overallLevel : '',\nbyRole: Array.isArray(doc?.EstimatedEffort?.byRole)\n? doc.EstimatedEffort.byRole.map((r: any) => ({ role: String(r?.role ?? ''), hours: asNum(r?.hours, 0) }))\n: [],\n},\n};\n}\n\nexport const code = async (inputs: any) => {\ntry {\nconst rawText = toStr(inputs?.executionPlanRaw ?? '');\nconst got = extractJson(rawText);\nif ((got as any).error) {\nreturn {\nok: false,\nerror: (got as any).error,\nsampleSnippet: rawText.slice(0, 400),\nhint: 'Map a STRING field from the AI step (e.g., response/content/text), not the whole step object.',\n};\n}\n\nconst workdaysPerWeek = asNum(inputs?.workdaysPerWeek, 5);\nconst hoursPerDay = asNum(inputs?.hoursPerDay, 8);\nconst timeframeWeeks = asNum(inputs?.timeframeWeeks, 8);\nconst maxDays = timeframeWeeks * 7;\nconst maxWorkdays = timeframeWeeks * workdaysPerWeek;\n\n// Normalize + enrich\nconst doc = normalize((got as any).parsed);\n\nconst perPhase = doc.WorkPlan.map(p => ({\n  phaseNumber: p.phaseNumber,\n  phaseName: p.phaseName,\n  taskCount: p.tasks.length,\n  durationDays: p.durationDays,\n}));\nconst totalTasks = perPhase.reduce((a, b) => a + b.taskCount, 0);\nconst totalDurationDays = perPhase.reduce((a, b) => a + b.durationDays, 0);\n\nconst warnings: string[] = [];\nfor (const p of doc.WorkPlan) {\n  if (asNum(p.durationDays) > maxDays) {\n    warnings.push(`Phase ${p.phaseNumber} ('${p.phaseName}') durationDays=${p.durationDays} exceeds maxDays=${maxDays}`);\n  }\n}\nif (totalDurationDays > maxDays) {\n  warnings.push(`Total plan duration ${totalDurationDays}d exceeds timeframe max ${maxDays}d (weeks=${timeframeWeeks}). Consider parallelization or rescoping.`);\n}\n\nconst byRole = doc.EstimatedEffort.byRole.filter(r => r.role && Number.isFinite(r.hours));\nconst totalHours = byRole.reduce((a, b) => a + b.hours, 0);\n\nconst roles = Array.from(new Set([\n  ...doc.WorkPlan.flatMap(p => p.ownerRoles),\n  ...byRole.map(r => r.role),\n]));\nconst techStack = Array.from(new Set(doc.TechStack));\n\nconst summaryLine =\n  `Plan listo: ${doc.WorkPlan.length} fases, ${totalDurationDays} días, ` +\n  `${totalTasks} tareas, esfuerzo ~${totalHours} h. ` +\n  (techStack.length ? `Tech: ${techStack.slice(0, 6).join(', ')}${techStack.length > 6 ? ', ...' : ''}.` : '');\n\n// Capacity planning (how many FTE needed to meet timeframe)\nconst availableHoursPerFTE = hoursPerDay * maxWorkdays; // e.g., 8 * (8*5) = 320\nconst fteNeeded = availableHoursPerFTE > 0 ? Math.ceil(totalHours / availableHoursPerFTE) : 0;\n\n// Heuristic parallelization hint (simple, deterministic)\nlet timelineParallelizationHint = '';\nif (totalDurationDays > maxDays && doc.WorkPlan.length >= 4) {\n  timelineParallelizationHint = 'Run Phase 2 (backend/AI) and Phase 3 (frontend) in parallel once API contracts are stable; overlap early UAT prep with late dev.';\n}\n\nconst sheetRow = {\n  ExpertDescription: doc.expertDescription,\n  Phases: doc.WorkPlan.length,\n  DurationDaysTotal: totalDurationDays,\n  TasksTotal: totalTasks,\n  EffortOverall: doc.EstimatedEffort.overallLevel,\n  EffortHoursTotal: totalHours,\n  Roles: roles.join(', '),\n  TechStack: techStack.join(', '),\n  AcceptanceCriteriaCount: doc.AcceptanceCriteria.length,\n  SuccessMetricsCount: doc.SuccessMetrics.length,\n  RisksCount: doc.WorkPlan.flatMap(p => p.risks).length,\n};\n\nreturn {\n  ok: true,\n  workplan: doc,\n\n  meta: {\n    perPhase,\n    totalTasks,\n    totalDurationDays,\n    timeframeWeeks,\n    maxDays,\n    workdaysPerWeek,\n    hoursPerDay,\n  },\n\n  effort: {\n    overallLevel: doc.EstimatedEffort.overallLevel,\n    totalHours,\n    byRole,\n    roles,\n  },\n\n  capacity: {\n    availableHoursPerFTE,\n    fteNeeded,\n    maxWorkdays,\n  },\n\n  flattened: {\n    deliverables: Array.from(new Set(doc.WorkPlan.flatMap(p => p.deliverables))),\n    dependencies: Array.from(new Set(doc.WorkPlan.flatMap(p => p.dependencies))),\n    risks: Array.from(new Set(doc.WorkPlan.flatMap(p => p.risks))),\n    mitigations: Array.from(new Set(doc.WorkPlan.flatMap(p => p.mitigations))),\n    inputsRequired: Array.from(new Set(doc.InputsRequired)),\n    techStack,\n    acceptanceCriteria: doc.AcceptanceCriteria,\n    successMetrics: doc.SuccessMetrics,\n    objectivesAll: Array.from(new Set(doc.WorkPlan.flatMap(p => p.objectives))),\n    tasksAll: Array.from(new Set(doc.WorkPlan.flatMap(p => p.tasks))),\n  },\n\n  summaryLine,\n  milestones: doc.WorkPlan.map(p => ({\n    title: `F${p.phaseNumber} - ${p.phaseName}`,\n    durationDays: p.durationDays,\n    deliverablesTop: p.deliverables.slice(0, 3),\n  })),\n  sheetRow,\n  warnings,\n  timelineFit: totalDurationDays <= maxDays,\n  timelineParallelizationHint,\n  rawUsed: (got as any).raw ?? '',\n};\n\n\n} catch (e) {\nreturn fmtErr(e);\n}\n};",
                    "packageJson": "{}"
                  },
                  "propertySettings": {
                    "executionPlanRaw": {
                      "type": "MANUAL"
                    }
                  },
                  "sampleDataSettings": {
                    "lastTestDate": "2025-08-27T23:39:02.915Z",
                    "sampleDataFileId": "KvdwFBRSFtSCGw0C8gX07"
                  },
                  "errorHandlingOptions": {
                    "retryOnFailure": {
                      "value": true
                    },
                    "continueOnFailure": {
                      "value": false
                    }
                  }
                },
                "nextAction": {
                  "name": "step_18",
                  "skip": false,
                  "type": "PIECE",
                  "valid": true,
                  "settings": {
                    "input": {
                      "auth": "{{connections['dJic7sC9QvWAHp8kER1cK']}}",
                      "model": "sonar-pro",
                      "roles": [
                        {
                          "role": "system",
                          "content": "You are a senior AI research analyst using live web results. Your task is to produce a concise, decision-grade brief of AI/ML challenges and risks for an industry, with actionable mitigations and real citations. Be precise, avoid hype, and never invent URLs or facts. If evidence is weak, say so. Prefer sources from the last 24 months; include older sources only if they are standards, specs, or canonical primers."
                        }
                      ],
                      "top_p": 0.9,
                      "prompt": "CONTEXT\n- Company: {{trigger.company | default: \"Compañía de Cliente\"}}\n- Industry focus: {{trigger.industry | default: \"Venta de Servicios\"}}\n- Operating region: {{trigger.region | default: \"LATAM\"}}\n- Project summary: {{step_4['summaryLine']}}\n- Decision time horizon: {{trigger.timeframeMonths | default: 3}}\n\nRESEARCH GOAL\nIdentify the top 6–8 AI/ML implementation challenges that are most relevant to delivering:\n{{step_4['workplan']['expertDescription']}}\n\nSCOPE & EVIDENCE RULES\n- Use browsing. Rely on sources from the last 24 months when possible. Use older only for standards (e.g., OWASP, NIST, ISO), core vendor docs, or durable concepts.\n- Do NOT fabricate links or claims. Cite only pages you actually used.\n- Prefer high-quality: standards bodies, cloud/vendor docs, peer-reviewed, reputable trade pubs. De-duplicate near-identical sources.\nOUTPUT FORMAT (JSON ONLY — no markdown, no commentary)\n{\n  \"industry\": \"string\",\n  \"region\": \"string\",\n  \"generatedAt\": \"ISO-8601\",\n  \"timeframeMonths\": number,\n  \"challenges\": [\n    {\n      \"id\": \"c1\",\n      \"title\": \"short\",\n      \"whyItMatters\": \"2-3 sentences, specific to dashboards + RAG/chatbot over plans/specs\",\n      \"impact\": \"low|medium|high\",\n      \"likelihood\": \"low|medium|high\",\n      \"timeframe\": \"now|6-12m|12-24m\",\n      \"affectedFunctions\": [\"engineering\",\"data\",\"security\",\"ops\",\"pm\",\"legal\"],\n      \"mitigations\": [\n        \"actionable step 1 (technology/process/contractual)\",\n        \"actionable step 2\",\n        \"actionable step 3\"\n      ],\n      \"costBand\": \"$|$$|$$$\",\n      \"dependencies\": [\"e.g., GA4/CRM access\", \"role mapping for RBAC\"],\n      \"notes\": \"brief nuance (e.g., model update cadence, SLA constraints, vendor lock-in)\",\n      \"citations\": [\n        {\"url\":\"https://...\", \"title\":\"...\", \"publisher\":\"...\", \"date\":\"YYYY-MM-DD\"}\n      ]\n    }\n  ],\n  \"topTakeaways\": [\n    \"bullet 1 (decision-grade, non-obvious)\",\n    \"bullet 2\",\n    \"bullet 3\",\n    \"bullet 4\",\n    \"bullet 5\"\n  ],\n  \"gapsInEvidence\": [\n    \"one-liner about where evidence is weak or conflicting\"\n  ]\n}\nCONSTRAINTS\n- 6–8 challenges maximum.\n- Each challenge must have ≥2 citations; mix sources when possible.\n- Keep strings compact; no marketing language.\n- If no credible source is found for a claim, omit the claim.\n- Return a **valid JSON object only**; first character ‘{’, last character ‘}’.\n- No backticks, no markdown, no explanations.",
                      "max_tokens": "3000",
                      "temperature": "0.3",
                      "presence_penalty": 0,
                      "frequency_penalty": 1
                    },
                    "pieceName": "@activepieces/piece-perplexity-ai",
                    "actionName": "ask-ai",
                    "pieceVersion": "~0.2.7",
                    "propertySettings": {
                      "auth": {
                        "type": "MANUAL"
                      },
                      "model": {
                        "type": "MANUAL"
                      },
                      "roles": {
                        "type": "MANUAL"
                      },
                      "top_p": {
                        "type": "MANUAL"
                      },
                      "prompt": {
                        "type": "MANUAL"
                      },
                      "max_tokens": {
                        "type": "MANUAL"
                      },
                      "temperature": {
                        "type": "MANUAL"
                      },
                      "presence_penalty": {
                        "type": "MANUAL"
                      },
                      "frequency_penalty": {
                        "type": "MANUAL"
                      }
                    },
                    "sampleDataSettings": {
                      "lastTestDate": "2025-08-27T23:56:10.113Z",
                      "sampleDataFileId": "QbcHFVJkBAhs8k9riivcv"
                    },
                    "errorHandlingOptions": {
                      "retryOnFailure": {
                        "value": true
                      },
                      "continueOnFailure": {
                        "value": false
                      }
                    }
                  },
                  "nextAction": {
                    "name": "step_5",
                    "skip": false,
                    "type": "PIECE",
                    "valid": true,
                    "settings": {
                      "input": {
                        "auth": "{{connections['dJic7sC9QvWAHp8kER1cK']}}",
                        "model": "sonar-pro",
                        "roles": [
                          {
                            "role": "system",
                            "content": "You are a senior market/industry analyst with web access. Produce a concise, decision-grade brief combining analyst reports, vendor guidance, reputable trade media, standards bodies, and practitioner/community discussions. All claims must be backed by live citations; never invent URLs. Prefer sources from the last 24 months; include older only for canonical standards or vendor specs."
                          }
                        ],
                        "top_p": 0.9,
                        "prompt": "CONTEXT\n- Company: {{trigger.company}}\n- Industry: {{trigger.industry}}\n- Region: {{trigger.region | default: \"Latam\"}}\n- Project: {{step_4['summaryLine']}}\n- Declared Tech Stack: {{step_4['flattened']['techStack']}}\n\n\nOBJECTIVE\nSynthesize the strongest community AND analyst signals relevant to delivering:\n{{step_4['workplan']['expertDescription']}}\n\nSCOPE & EVIDENCE RULES\n- Use browsing. Prioritize last 24 months. Use older only for standards (e.g., OWASP/NIST/ISO), core vendor docs, or durable concepts.\n- Cite only pages you actually used. No blogspam, no link shorteners, no invented URLs.\n- Prefer diversity: at least one standards body/vendor doc, one reputable trade/analyst report, and one practitioner/community thread where appropriate.\n- De-duplicate near-identical sources.\nOUTPUT FORMAT (JSON ONLY — no markdown, no commentary)\n{\n  \"industry\": \"string\",\n  \"region\": \"string\",\n  \"generatedAt\": \"ISO-8601\",\n  \"timeframeMonths\": number,\n  \"project\": { \"summary\": \"string\", \"techStack\": [\"string\"] },\n  \"communitySignals\": [\n    {\n      \"topic\": \"short label\",\n      \"signal\": \"what builders are actually saying/doing (2-3 sentences)\",\n      \"confidence\": \"low|medium|high\",\n      \"citations\": [\n        {\"url\":\"https://...\",\"title\":\"...\",\"publisher\":\"...\",\"date\":\"YYYY-MM-DD\"}\n      ]\n    }\n  ],\n  \"analystSignals\": [\n    {\n      \"theme\": \"short label\",\n      \"finding\": \"concise finding (2-3 sentences) relevant to dashboards + RAG/ACL\",\n      \"implication\": \"what it means for THIS project\",\n      \"citations\": [\n        {\"url\":\"https://...\",\"title\":\"...\",\"publisher\":\"...\",\"date\":\"YYYY-MM-DD\"}\n      ]\n    }\n  ],\n  \"toolLandscape\": [\n    {\n      \"category\": \"vector storage|ETL|observability|RBAC/IdP|doc processing|LLM gateway\",\n      \"options\": [\n        {\"name\":\"pgvector\",\"stance\":\"preferred|neutral|avoid\",\"why\":\"one line\"},\n        {\"name\":\"<alt>\",\"stance\":\"...\", \"why\":\"...\"}\n      ],\n      \"citations\": [{\"url\":\"https://...\",\"title\":\"...\",\"publisher\":\"...\",\"date\":\"YYYY-MM-DD\"}]\n    }\n  ],\n  \"benchmarks\": [\n    {\n      \"metric\": \"p95 latency|RAG answer quality|embedding throughput\",\n      \"typical\": \"number/range and context\",\n      \"notes\": \"assumptions: dataset size, hardware, concurrency\",\n      \"citations\": [{\"url\":\"https://...\",\"title\":\"...\",\"publisher\":\"...\",\"date\":\"YYYY-MM-DD\"}]\n    }\n  ],\n  \"costSignals\": [\n    {\n      \"area\": \"LLM tokens|vector storage|egress|observability\",\n      \"ruleOfThumb\": \"concise rule or driver\",\n      \"citations\": [{\"url\":\"https://...\",\"title\":\"...\",\"publisher\":\"...\",\"date\":\"YYYY-MM-DD\"}]\n    }\n  ],\n  \"regulatoryNotes\": [\n    {\n      \"topic\": \"privacy|data residency|sector compliance\",\n      \"appliesTo\": [\"{{region}}\"],\n      \"citations\": [{\"url\":\"https://...\",\"title\":\"...\",\"publisher\":\"...\",\"date\":\"YYYY-MM-DD\"}]\n    }\n  ],\n  \"topRecommendations\": [\n    \"bullet 1 (actionable, decision-grade)\",\n    \"bullet 2\",\n    \"bullet 3\",\n    \"bullet 4\",\n    \"bullet 5\"\n  ],\n  \"gapsInEvidence\": [\n    \"one-liner about where evidence is weak or conflicting\"\n  ]\n}\nCONSTRAINTS\n- Keep arrays compact: 4–6 items for communitySignals and analystSignals; 4–6 tool categories; ≤3 options per tool category.\n- Each item requires ≥1 citation; challenges/benchmarks ideally ≥2; mix sources when possible.\n- Return a VALID JSON object only; first character '{', last character '}'. No backticks, no markdown, no explanations.",
                        "max_tokens": "3500",
                        "temperature": 0.2,
                        "presence_penalty": 0,
                        "frequency_penalty": 1
                      },
                      "pieceName": "@activepieces/piece-perplexity-ai",
                      "actionName": "ask-ai",
                      "pieceVersion": "~0.2.7",
                      "propertySettings": {
                        "auth": {
                          "type": "MANUAL"
                        },
                        "model": {
                          "type": "MANUAL"
                        },
                        "roles": {
                          "type": "MANUAL"
                        },
                        "top_p": {
                          "type": "MANUAL"
                        },
                        "prompt": {
                          "type": "MANUAL"
                        },
                        "max_tokens": {
                          "type": "MANUAL"
                        },
                        "temperature": {
                          "type": "MANUAL"
                        },
                        "presence_penalty": {
                          "type": "MANUAL"
                        },
                        "frequency_penalty": {
                          "type": "MANUAL"
                        }
                      },
                      "sampleDataSettings": {
                        "lastTestDate": "2025-08-28T00:10:58.021Z",
                        "sampleDataFileId": "EXTRc2x4ZR8WVmtUkj8Ml"
                      },
                      "errorHandlingOptions": {
                        "retryOnFailure": {
                          "value": true
                        },
                        "continueOnFailure": {
                          "value": false
                        }
                      }
                    },
                    "nextAction": {
                      "name": "step_6",
                      "type": "PIECE",
                      "valid": true,
                      "settings": {
                        "input": {
                          "auth": "{{connections['dJic7sC9QvWAHp8kER1cK']}}",
                          "model": "sonar-pro",
                          "roles": [
                            {
                              "role": "system",
                              "content": "You are a senior agency RFP desk with live web access. Your job is to draft a decision-grade market view of how agencies and freelancers would scope, price, and staff a requested AI project. Use only browsed, citable evidence for rates, timelines, scope patterns, and tooling—prefer sources from the last 24 months; include older only for standards/specs. Never invent URLs. Keep content compact, specific, and implementation-ready."
                            }
                          ],
                          "top_p": 0.9,
                          "prompt": "CONTEXT\n- Company: {{trigger.company}}\n- Industry: {{trigger.industry}}\n- Region: {{trigger.region | default: \"Latam\"}}\n- Project: {{step_4['summaryLine']}}\n- Declared Tech Stack: {{step_4['flattened']['techStack']}}\n\nOBJECTIVE\nProduce a market-calibrated view of how agencies/freelancers typically package, price, staff, and schedule work for this kind of AI project, with real citations and compact, parseable fields.\n\nSCOPE & EVIDENCE RULES\n- Use browsing and include citations for non-obvious claims (rates, pricing bands, timelines, tooling norms, compliance).\n- Prefer sources from last 24 months. Use older only for standards (OWASP/NIST/ISO), vendor reference architectures, or canonical docs.\n- Avoid blogspam and link shorteners. No invented URLs.\n- Keep numbers as numbers (not strings). Use the provided currency for price bands.\n\nOUTPUT FORMAT (RETURN JSON ONLY — no markdown, no commentary)\n{\n  \"project\": {\n    \"industry\": \"string\",\n    \"region\": \"string\",\n    \"summary\": \"one line\",\n    \"timeframeWeeks\": number,\n    \"currency\": \"string\",\n    \"budgetRange\": {\"min\": number, \"max\": number, \"currency\": \"string\"} | null,\n    \"techStack\": [\"string\"]\n  },\n  \"packages\": [\n    {\n      \"id\": \"mvp|standard|premium\",\n      \"scopeHighlights\": [\"bullet 1\",\"bullet 2\",\"bullet 3\"],\n      \"timelineWeeks\": number,\n      \"teamMix\": [{\"role\":\"string\",\"hours\": number}],\n      \"price\": {\"currency\":\"string\",\"min\": number,\"max\": number,\"basis\": \"fixed|t&m\"},\n      \"paymentMilestones\": [{\"name\":\"string\",\"percent\": number}],\n      \"deliverables\": [\"string\"],\n      \"assumptions\": [\"string\"],\n      \"exclusions\": [\"string\"],\n      \"dependencies\": [\"string\"],\n      \"risks\": [{\"risk\":\"string\",\"mitigation\":\"string\"}],\n      \"citations\": [{\"url\":\"https://...\",\"title\":\"...\",\"publisher\":\"...\",\"date\":\"YYYY-MM-DD\"}]\n    }\n  ],\n  \"marketSignals\": [\n    {\n      \"topic\": \"e.g., staffing patterns, typical SOW shape, vector DB choices\",\n      \"signal\": \"2–3 sentences on what agencies are actually doing for this project type\",\n      \"citations\": [{\"url\":\"https://...\",\"title\":\"...\",\"publisher\":\"...\",\"date\":\"YYYY-MM-DD\"}]\n    }\n  ],\n  \"rateSignals\": [\n    {\n      \"role\": \"string\",\n      \"region\": \"string\",\n      \"rangePerHour\": {\"min\": number,\"max\": number,\"currency\":\"string\"},\n      \"basis\": \"evidence|estimate\",\n      \"citations\": [{\"url\":\"https://...\",\"title\":\"...\",\"publisher\":\"...\",\"date\":\"YYYY-MM-DD\"}]\n    }\n  ],\n  \"toolLandscape\": [\n    {\n      \"category\": \"vector storage|ETL|observability|RBAC/IdP|doc processing|LLM gateway\",\n      \"options\": [\n        {\"name\":\"string\",\"stance\":\"preferred|neutral|avoid\",\"why\":\"one line\"}\n      ],\n      \"citations\": [{\"url\":\"https://...\",\"title\":\"...\",\"publisher\":\"...\",\"date\":\"YYYY-MM-DD\"}]\n    }\n  ],\n  \"topTakeaways\": [\"bullet 1\",\"bullet 2\",\"bullet 3\",\"bullet 4\",\"bullet 5\"],\n  \"gapsInEvidence\": [\"one-liner if certain data was sparse or conflicting\"],\n  \"generatedAt\": \"ISO-8601\"\n}\nCONSTRAINTS\n- Exactly 3 packages (mvp, standard, premium). Sum of paymentMilestones.percent must equal 100.\n- 3–6 items for marketSignals; 3–6 items for rateSignals; 4–6 categories in toolLandscape; ≤3 options per category.\n- If budgetRange is present, keep package price bands compatible with it and call this out in assumptions.\n- If evidence is weak for a number, mark the rateSignals.basis as \"estimate\" and still include supporting citations that justify the range.\n- Return a VALID JSON object only. First character '{', last character '}'. No backticks, no markdown, no extra text.",
                          "max_tokens": "2400",
                          "temperature": 0.2,
                          "presence_penalty": 0,
                          "frequency_penalty": 1
                        },
                        "pieceName": "@activepieces/piece-perplexity-ai",
                        "actionName": "ask-ai",
                        "pieceVersion": "~0.2.7",
                        "propertySettings": {
                          "auth": {
                            "type": "MANUAL"
                          },
                          "model": {
                            "type": "MANUAL"
                          },
                          "roles": {
                            "type": "MANUAL"
                          },
                          "top_p": {
                            "type": "MANUAL"
                          },
                          "prompt": {
                            "type": "MANUAL"
                          },
                          "max_tokens": {
                            "type": "MANUAL"
                          },
                          "temperature": {
                            "type": "MANUAL"
                          },
                          "presence_penalty": {
                            "type": "MANUAL"
                          },
                          "frequency_penalty": {
                            "type": "MANUAL"
                          }
                        },
                        "sampleDataSettings": {
                          "lastTestDate": "2025-08-28T00:13:50.642Z",
                          "sampleDataFileId": "TYVOAit8PTDiTeBySW7fi"
                        },
                        "errorHandlingOptions": {
                          "retryOnFailure": {
                            "value": true
                          },
                          "continueOnFailure": {
                            "value": false
                          }
                        }
                      },
                      "nextAction": {
                        "name": "step_9",
                        "skip": false,
                        "type": "PIECE",
                        "valid": true,
                        "settings": {
                          "input": {
                            "auth": "{{connections['HRSnRdbU15DnXlhDmUKqW']}}",
                            "topP": 1,
                            "model": "gpt-4.1",
                            "roles": [
                              {
                                "role": "system",
                                "content": "You are a world-class business strategist and proposal writer for a top-tier no-code/low-code development agency. Your primary goal is to convert a set of structured project data into a persuasive, client-facing business proposal that is clear, compelling, and designed to get a the final *yes*."
                              }
                            ],
                            "prompt": "You are a senior proposals lead writing client-ready proposals for AI projects. Your output must be deterministic, implementation-oriented, and free of hype. \n- Use the provided work plan and research as ground truth. Do NOT invent facts, timelines, prices, or citations. \n- Respect the requested language and keep tone professional and concise.\n- Keep numbers as numbers, currency as given, and dates in ISO-8601 when needed.\n- Structure the proposal so it can be rendered to HTML/PDF by another step without guessing.\n\nlanguage → \ndateISO → {{step_17['current_date']}}\nclient → {{step_7['nombre_cliente']}} {{step_7['apellido_cliente']}}\nclient's company → {{step_7['empresa_cliente']}}\nprojectTitle → {{trigger.projectTitle}}\ngoals → {{trigger.goals}} \nconstraints → {{trigger.constraints}} \nworkplan → {{step_4['workplan']['WorkPlan']}}\nworkplanMeta → {{step_4['meta']}}\nsuccessMetricsParsed → {{step_4['workplan']['SuccessMetrics']}}\nindustryChallenges → {{step_18}}\ncommunityAnalystView → {{step_5}}\nagencyMarketView → {{step_6}}\n\nTASK\nDraft a complete client-facing proposal that:\n1) Aligns with the WorkPlan phases and durations.\n2) Uses the provided Pricing verbatim (no math).\n3) Weaves research themes qualitatively (no URLs here).\n4) **Elevates ParsedSuccessMetrics into the proposal’s measurable objectives**:\n   - Merge WorkPlan.SuccessMetrics (if any) with ParsedSuccessMetrics.\n   - Normalize to concise, **measurable** targets (include units/thresholds where possible).\n   - Deduplicate; keep 4–6 high-signal items.\n   - Surface the top 3 as the bullets in executiveSummary.outcomes.\n   - Repeat the full merged list under successMetrics and echo the testable subset in acceptanceCriteria as pass/fail statements.\n\nCONSTRAINTS\n- Use Spanish for your output, unless explicitly instructed otherwise.\n- Do NOT invent prices or recompute totals; copy exactly from Pricing.\n- Mirror WorkPlan phases and durations (names can be lightly edited for clarity).\n- Keep each list to 3–6 bullets unless WorkPlan requires more.\n- If totalDurationDays exceeds WorkPlanMeta.maxDays, add a clear note in workPlanSummary.timelineNotes about parallelization.\n- **Success metrics must be specific and measurable** (e.g., “p95 API ≤ 2s at 50 concurrent users”).\n- No URLs in this step’s output (citations live in prior nodes).\n- Return a VALID JSON object only. No backticks, no markdown, no extra commentary.",
                            "maxTokens": "6500",
                            "temperature": "0.4",
                            "presencePenalty": 0.6,
                            "frequencyPenalty": "0"
                          },
                          "pieceName": "@activepieces/piece-openai",
                          "actionName": "ask_chatgpt",
                          "pieceVersion": "~0.5.5",
                          "propertySettings": {
                            "auth": {
                              "type": "MANUAL"
                            },
                            "topP": {
                              "type": "MANUAL"
                            },
                            "model": {
                              "type": "MANUAL"
                            },
                            "roles": {
                              "type": "MANUAL"
                            },
                            "prompt": {
                              "type": "MANUAL"
                            },
                            "maxTokens": {
                              "type": "MANUAL"
                            },
                            "temperature": {
                              "type": "MANUAL"
                            },
                            "presencePenalty": {
                              "type": "MANUAL"
                            },
                            "frequencyPenalty": {
                              "type": "MANUAL"
                            }
                          },
                          "errorHandlingOptions": {
                            "retryOnFailure": {
                              "value": true
                            },
                            "continueOnFailure": {
                              "value": false
                            }
                          }
                        },
                        "nextAction": {
                          "name": "step_10",
                          "skip": false,
                          "type": "PIECE",
                          "valid": true,
                          "settings": {
                            "input": {
                              "auth": "{{connections['7UyEOcBImqZK15GkB3YUF']}}",
                              "model": "gemini-2.5-pro",
                              "prompt": "You are a deterministic HTML renderer. Produce ONE complete HTML5 document only—no explanations, no code fences. \nKeep the provided HTML structure and CSS exactly as given; inject all content inside <main>. \nUse the input “proposal” as the single source of truth:\n- If “proposal” parses as JSON with the schema from step_9, render sections from that JSON.\n- If parsing fails, treat “proposal” as Markdown and render it as-is (converted to HTML).\nEscape all dynamic content (no script tags). \nLocalize section headings using the provided “language”: use Spanish when language starts with “es”, otherwise English.\nDo not fetch external data, do not add scripts/styles beyond those provided.\n\nProposal to format: {{step_9}}\n\n# RENDERING RULES\n1) Keep the HTML skeleton & CSS EXACTLY as below. Fill <header> text/logo and footer line using brand_* and current_date. Put ALL rendered content inside <main>.\n2) If proposal is JSON (preferred):\n   - Expected keys (may be subset): \n     metadata, executiveSummary, solutionOverview, workPlanSummary, deliverables, assumptions, exclusions, risksAndMitigations, investment, acceptanceCriteria, successMetrics, nextSteps, signatureBlock.\n   - Render sections in this order (omit entirely if missing):\n     • H1: metadata.projectTitle (left) + client (chip)  \n     • Executive summary: situation, approach, outcomes (bulleted)  \n     • Solution overview: architectureSummary paragraph; Key capabilities (bulleted); Non-functional highlights (bulleted)  \n     • Work plan: one table with Phase, Name, Duration, Objectives(top3), Deliverables(top3); total duration; optional timelineNotes callout  \n     • Deliverables (bulleted)  \n     • Two-column: Assumptions (left) / Exclusions (right)  \n     • Risks & mitigations: table Risk | Mitigation  \n     • Investment: show Base and Total prominently; optional Add-ons table (Name | Price); optional Contingency % / Discount % lines; optional Payment milestones table (Name | %)  \n     • Acceptance criteria (bulleted)  \n     • Success metrics (bulleted)  \n     • Next steps: table Step | Owner | Due (business days)  \n     • Signature: validThrough + contact (name, role, email)\n   - Numbers remain numbers; format currency as plain text “{CURRENCY} {amount}”.\n3) If proposal is Markdown (fallback):\n   - Convert Markdown to HTML and inject inside <main> without altering the global template.\n4) Localization (labels):\n   If language starts with \"es\":\n     Phase=Fase, Name=Nombre, Duration=Duración, Objectives (top)=Objetivos (top), Deliverables (top)=Entregables (top),\n     Executive summary=Resumen ejecutivo, Solution overview=Visión de la solución, Key capabilities=Capacidades clave,\n     Non-functional highlights=Atributos no funcionales, Work plan=Plan de trabajo, Total duration=Duración total,\n     Timeline notes=Notas de cronograma, Assumptions=Supuestos, Exclusions=Exclusiones,\n     Risks & mitigations=Riesgos y mitigaciones, Risk=Riesgo, Mitigation=Mitigación,\n     Investment=Inversión, Add-ons=Add-ons, Price=Precio, Payment milestones=Hitos de pago, Milestone=Hito, Percent=Porcentaje,\n     Acceptance criteria=Criterios de aceptación, Success metrics=Métricas de éxito,\n     Next steps=Próximos pasos, Owner=Responsable, Due=Vence,\n     Valid through=Válido hasta, Contact=Contacto, Date=Fecha, Confidential=Confidencial, days=días, bdays=días háb.\n   Else use English equivalents.\n5) Safety & cleanliness:\n   - Escape user-provided strings; do not execute scripts.\n   - No extra text before <!DOCTYPE html> or after </html>.\n# FIXED TEMPLATE (DO NOT CHANGE STRUCTURE OR CSS; only fill header/main/footer content)\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Business Proposal</title>\n  <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">\n  <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>\n  <link href=\"https://fonts.googleapis.com/css2?family=Inter:wght@400;700&display=swap\" rel=\"stylesheet\">\n  <style>\n    @media print { body { -webkit-print-color-adjust: exact; print-color-adjust: exact; } .container { box-shadow: none; border: none; } }\n    body { font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif; line-height: 1.7; color: #1A202C; background-color: #F7FAFC; margin: 0; padding: 0; font-size: 11pt; }\n    .container { max-width: 8.5in; min-height: 10.5in; margin: 2rem auto; padding: 4rem 4rem; background-color: #ffffff; box-shadow: 0 10px 30px rgba(0,0,0,0.08); border: 1px solid #E2E8F0; border-radius: 4px; }\n    header { border-bottom: 1px solid #E2E8F0; padding-bottom: 1.5rem; margin-bottom: 3rem; display: flex; justify-content: space-between; align-items: center; }\n    .header-logo { font-weight: 700; font-size: 20px; color: #2D3748; display:flex; align-items:center; gap:.5rem;}\n    .header-contact { font-size: 10pt; color: #718096; text-align: right; }\n    footer { text-align: center; font-size: 9pt; color: #A0AEC0; border-top: 1px solid #E2E8F0; padding-top: 1.5rem; margin-top: 4rem; }\n    h1, h2, h3, h4 { font-weight: 700; line-height: 1.3; }\n    h1 { font-size: 28pt; color: #1A202C; text-align: left; margin-bottom: 0.5rem; }\n    h2 { font-size: 18pt; color: #2D3748; border-bottom: 2px solid #3182CE; padding-bottom: 0.5rem; margin-top: 2.5rem; margin-bottom: 1.5rem; }\n    h3 { font-size: 14pt; color: #3182CE; margin-top: 2rem; margin-bottom: 0.5rem; }\n    p { margin-bottom: 1rem; }\n    ul, ol { padding-left: 20px; }\n    strong { font-weight: 700; color: #2D3748; }\n    table { width: 100%; border-collapse: collapse; margin-top: 1.5rem; }\n    th, td { text-align: left; padding: 0.75rem 1rem; border-bottom: 1px solid #E2E8F0; }\n    th { background-color: #EDF2F7; font-weight: 700; color: #2D3748; }\n    tr:nth-child(even) { background-color: #F7FAFC; }\n    h1, h2, h3, h4 { page-break-after: avoid; }\n    table, ul, ol, .investment-section { page-break-inside: avoid; }\n    p, li { orphans: 3; widows: 3; }\n  </style>\n</head>\n<body>\n  <div class=\"container\">\n    <header>\n      <div class=\"header-logo\">\n        {{brand_logo ? `<img src=\"${brand_logo}\" alt=\"logo\" style=\"height:20px\">` : ''}}\n        {{brand_name || 'Menatech'}}\n      </div>\n      <div class=\"header-contact\">\n        {{brand_contact_email || 'gonzalo@menatech.cloud'}}<br>\n        {{brand_website || 'https://menatech.cloud'}}\n      </div>\n    </header>\n    <main>\n      <!-- Inject rendered content here. Build from JSON if parseable; otherwise render Markdown. -->\n    </main>\n    <footer>\n      {{(language && language.startsWith('es')) ? 'Propuesta creada para' : 'Proposal created for'}} \n      {{(proposal?.metadata?.client) || '[Client Company Name]'}}\n      {{(language && language.startsWith('es')) ? 'el' : 'on'}} {{current_date}}\n    </footer>\n  </div>\n</body>\n</html>"
                            },
                            "pieceName": "@activepieces/piece-google-gemini",
                            "actionName": "chat_gemini",
                            "pieceVersion": "~0.0.17",
                            "propertySettings": {
                              "auth": {
                                "type": "MANUAL"
                              },
                              "model": {
                                "type": "MANUAL"
                              },
                              "prompt": {
                                "type": "MANUAL"
                              }
                            },
                            "sampleDataSettings": {
                              "lastTestDate": "2025-08-28T00:38:50.200Z",
                              "sampleDataFileId": "hxXzEF8TW61XeZBWN1aXF"
                            },
                            "errorHandlingOptions": {
                              "retryOnFailure": {
                                "value": true
                              },
                              "continueOnFailure": {
                                "value": false
                              }
                            }
                          },
                          "nextAction": {
                            "name": "step_13",
                            "skip": false,
                            "type": "CODE",
                            "valid": true,
                            "settings": {
                              "input": {
                                "htmlRaw": "{{step_10['response']}}"
                              },
                              "sourceCode": {
                                "code": "export const code = async (inputs) => {\n  // Get the raw string response from the Gemini node in step_10.\n  const rawResponse = inputs.htmlRaw;\n\n  // If the input is empty or not a string, return an empty HTML document to prevent errors.\n  if (!rawResponse || typeof rawResponse !== 'string') {\n    console.error(\"Input from previous step is not a valid string.\");\n    return { html: \"<html><body><p>Error: No valid HTML content received.</p></body></html>\" };\n  }\n\n  // Use a regular expression to find the complete HTML document,\n  // from <!DOCTYPE html> to </html>. This reliably extracts the code,\n  // ignoring any introductory text like \"Here is the HTML code:\" or markdown backticks.\n  const match = rawResponse.match(/(<!DOCTYPE html>[\\s\\S]*?<\\/html>)/i);\n\n  // If a valid HTML document is found in the string, use it. Otherwise, use the raw input as a fallback.\n  const cleanHtml = match ? match[0] : rawResponse;\n\n  // The PDF.co node in the next step requires an input named \"html\".\n  // By returning an object with this structure, you can easily map this output\n  // to the input of the next step.\n  return {\n    html: cleanHtml\n  };\n};",
                                "packageJson": "{}"
                              },
                              "propertySettings": {
                                "htmlRaw": {
                                  "type": "MANUAL"
                                }
                              },
                              "sampleDataSettings": {
                                "lastTestDate": "2025-08-28T00:55:29.248Z",
                                "sampleDataFileId": "jrM65ObHXut3ejqaBjm0f"
                              },
                              "errorHandlingOptions": {
                                "retryOnFailure": {
                                  "value": true
                                },
                                "continueOnFailure": {
                                  "value": false
                                }
                              }
                            },
                            "nextAction": {
                              "name": "step_12",
                              "skip": false,
                              "type": "PIECE",
                              "valid": true,
                              "settings": {
                                "input": {
                                  "auth": "{{connections['LDbbwG2U6G4wEftStQmfe']}}",
                                  "html": "{{step_13['html']}}",
                                  "name": "Proposal.pdf",
                                  "margins": "15mm 15mm 15mm 15mm",
                                  "paperSize": "A4",
                                  "printBackground": true,
                                  "doNotWaitFullLoad": false
                                },
                                "pieceName": "@activepieces/piece-pdf-co",
                                "actionName": "convert_html_to_pdf",
                                "pieceVersion": "~0.0.7",
                                "propertySettings": {
                                  "auth": {
                                    "type": "MANUAL"
                                  },
                                  "html": {
                                    "type": "MANUAL"
                                  },
                                  "name": {
                                    "type": "MANUAL"
                                  },
                                  "footer": {
                                    "type": "MANUAL"
                                  },
                                  "margins": {
                                    "type": "MANUAL"
                                  },
                                  "paperSize": {
                                    "type": "MANUAL"
                                  },
                                  "printBackground": {
                                    "type": "MANUAL"
                                  },
                                  "doNotWaitFullLoad": {
                                    "type": "MANUAL"
                                  }
                                },
                                "sampleDataSettings": {
                                  "lastTestDate": "2025-08-28T13:25:36.655Z",
                                  "sampleDataFileId": "KSHZFOmIfGIaRJ2onS3QW"
                                },
                                "errorHandlingOptions": {
                                  "retryOnFailure": {
                                    "value": true
                                  },
                                  "continueOnFailure": {
                                    "value": false
                                  }
                                }
                              },
                              "nextAction": {
                                "name": "step_15",
                                "type": "PIECE",
                                "valid": true,
                                "settings": {
                                  "input": {
                                    "auth": "{{connections['bQWH152xxXZeib1hfesWI']}}",
                                    "model": "claude-3-7-sonnet-latest",
                                    "prompt": "LANGUAGE: {{language}}\nINPUTS\n- Work Instructions: {{step_4}}\n- Client's Proposal: {{step_9}}\n\nGOAL\nProduce an execution plan that:\n1) Covers all WorkPlan phases/deliverables with traceable tasks.\n2) Fits within the timeframeWeeks when possible; if not, clearly flag capacity/schedule risk and propose parallelization.\n3) Aligns gates/acceptanceCriteria/successMetrics so “done” is testable.\n4) Assigns ownerRole per task (assignee may remain blank if unknown).\n5) Surfaces critical path, risks, comms cadence, and a concrete cutover plan.\n\nSCHEDULING & ESTIMATION\n- Compute a sprint schedule from startDateISO with 1- or 2-week sprints (choose the shortest that fits without exceeding max tokens; default to 2 weeks).\n- Estimate task hours using effort.byRole and typical task sizes; keep estimates realistic and consistent with capacity.availableHoursPerFTE if present.\n- Derive milestone dates from sprint boundaries.\n- If total estimated hours > capacity, add capacityRiskNote and a parallelizationHint.\n\nCONSTRAINTS\n- Use {{language}} for all strings.\n- IDs must be unique and stable (e.g., T1..Tn, S1..Sn, M1..Mn).\n- Every task must map to a sprintId and a phaseNumber.\n- Cover each WorkPlan phase with ≥1 milestone and ≥1 gate.\n- Use acceptanceCriteria and successMetrics to define gate exitCriteria (make them testable).\n- Keep arrays compact: tasks ≤ 60 total; risks 5–10; gates 4–8; sprints 4–8 depending on timeframe.\n- If evidence from research nodes suggests compliance/security needs, include a dedicated “security” workstream task and gate.",
                                    "maxTokens": "6500",
                                    "temperature": "0.6",
                                    "systemPrompt": "You are a senior delivery manager and program scheduler. Produce a deterministic execution plan with tasks, sprints, milestones, quality gates, risks, comms cadence, resource plan, and cutover steps.\nRules:\n- Use only the provided inputs; do NOT invent URLs or external facts.\n- Keep the requested language for all strings.\n- Prefer compact, unambiguous phrasing suitable for import into planning tools.\n- Keep numbers as numbers; use ISO-8601 dates.\n- Derive schedule from startDateISO, timeframeWeeks, workdaysPerWeek, hoursPerDay.\n- If inputs are incomplete, return best-effort with explicit assumptions and openQuestions.",
                                    "thinkingMode": true,
                                    "thinkingModeParams": {
                                      "budgetTokens": 1024
                                    }
                                  },
                                  "pieceName": "@activepieces/piece-claude",
                                  "actionName": "ask_claude",
                                  "pieceVersion": "~0.2.1",
                                  "propertySettings": {
                                    "auth": {
                                      "type": "MANUAL"
                                    },
                                    "model": {
                                      "type": "MANUAL"
                                    },
                                    "prompt": {
                                      "type": "MANUAL"
                                    },
                                    "maxTokens": {
                                      "type": "MANUAL"
                                    },
                                    "temperature": {
                                      "type": "MANUAL"
                                    },
                                    "systemPrompt": {
                                      "type": "MANUAL"
                                    },
                                    "thinkingMode": {
                                      "type": "MANUAL"
                                    },
                                    "thinkingModeParams": {
                                      "type": "MANUAL"
                                    }
                                  },
                                  "sampleDataSettings": {
                                    "lastTestDate": "2025-08-28T01:43:25.549Z",
                                    "sampleDataFileId": "1LsNwAq90CsyaVcAsrefj"
                                  },
                                  "errorHandlingOptions": {
                                    "retryOnFailure": {
                                      "value": true
                                    },
                                    "continueOnFailure": {
                                      "value": false
                                    }
                                  }
                                },
                                "nextAction": {
                                  "name": "step_14",
                                  "skip": false,
                                  "type": "CODE",
                                  "valid": true,
                                  "settings": {
                                    "input": {
                                      "planMd": "{{step_15}}"
                                    },
                                    "sourceCode": {
                                      "code": "// step_XX — Parse \"Execution Plan\" Markdown → structured JSON\n// Input props:\n//   - planMd: string   (markdown from step_15)\n// Output:\n//   {\n//     ok: true,\n//     title: string,\n//     overview: string,\n//     executiveSummary: { startDateISO, endDateISO, duration, scheduleRisk, approach },\n//     sprints: [{ id,name,startISO,endISO,focus }],\n//     milestones: [{ id,name,dateISO,deliverables: string[] }],\n//     gates: [{ id,name,dateISO,exitCriteria: string[] }],\n//     tasks: [{ id,title,phase:number,sprintId,ownerRole,effortHours:number,dependencies:string[] }],\n//     criticalPath: { paths: string[][] },\n//     resourcePlan: [{ role, hoursBySprint: Record<string,number>, totalHours:number, capacityHours:number|null, utilizationPct:number|null }],\n//     risks: [{ id,risk,impact,probability,mitigation }],\n//     communicationPlan: [{ type,frequency,participants:string[],purpose }],\n//     cutover: { preGoLive: string[], goLive: string[], postGoLive: string[] },\n//     openQuestions: string[],\n//     assumptions: string[],\n//     stats: { taskCount:number, sprintCount:number, riskCount:number },\n//     warnings: string[]\n//   }\n\ntype Sprint = { id: string; name: string; startISO: string; endISO: string; focus: string };\ntype Milestone = { id: string; name: string; dateISO: string; deliverables: string[] };\ntype Gate = { id: string; name: string; dateISO: string; exitCriteria: string[] };\ntype Task = { id: string; title: string; phase: number; sprintId: string; ownerRole: string; effortHours: number; dependencies: string[] };\ntype Risk = { id: string; risk: string; impact: string; probability: string; mitigation: string };\ntype ResourceRow = { role: string; hoursBySprint: Record<string, number>; totalHours: number; capacityHours: number | null; utilizationPct: number | null };\ntype Comms = { type: string; frequency: string; participants: string[]; purpose: string };\n\nfunction toStr(x: unknown): string { return typeof x === 'string' ? x : (x == null ? '' : String(x)); }\nfunction norm(s: string): string { return s.replace(/\\r\\n/g, '\\n'); }\nfunction trimPipes(s: string): string { return s.replace(/^\\s*\\|/, '').replace(/\\|\\s*$/, '').trim(); }\nfunction toISO(s: string): string {\n  const t = Date.parse(s.trim());\n  return Number.isFinite(t) ? new Date(t).toISOString() : s.trim();\n}\nfunction splitCsvLike(s: string): string[] {\n  if (!s) return [];\n  return s.split(/[,;]+/).map(x => x.trim()).filter(Boolean);\n}\nfunction parseIdList(s: string): string[] {\n  if (!s) return [];\n  // Supports: \"T1, T2\", \"T1-T4\", \"T1/T22\", \"T1–T4\"\n  const tokens = s.split(/[,\\s/]+/).filter(Boolean);\n  const out: string[] = [];\n  for (const tk of tokens) {\n    const m = tk.match(/^([A-Za-z]+)?(\\d+)(?:[-–](\\d+))?$/);\n    if (m) {\n      const prefix = m[1] || 'T';\n      const a = parseInt(m[2], 10);\n      const b = m[3] ? parseInt(m[3], 10) : a;\n      const start = Math.min(a, b);\n      const end = Math.max(a, b);\n      for (let i = start; i <= end; i++) out.push(`${prefix}${i}`);\n    } else if (/^T\\d+$/i.test(tk)) {\n      out.push(tk.toUpperCase());\n    }\n  }\n  return Array.from(new Set(out));\n}\nfunction parseNumberCell(s: string): number {\n  const n = Number(String(s).replace(/[^\\d.-]/g, ''));\n  return Number.isFinite(n) ? n : 0;\n}\n\nfunction findSection(md: string, heading: string): string {\n  // Return content from \"## heading\" until next \"## \" (or end)\n  const re = new RegExp(`^##\\\\s+${escapeRegExp(heading)}\\\\s*$`, 'mi');\n  const m = md.match(re);\n  if (!m) return '';\n  const start = m.index ?? 0;\n  const after = md.slice(start + m[0].length);\n  const next = after.search(/^##\\s+/m);\n  return next >= 0 ? after.slice(0, next).trim() : after.trim();\n}\nfunction findSubSection(md: string, heading: string): string {\n  // Return content from \"### heading\" until next \"### \" (or next \"##\")\n  const re = new RegExp(`^###\\\\s+${escapeRegExp(heading)}\\\\s*.*$`, 'mi');\n  const m = md.match(re);\n  if (!m) return '';\n  const start = m.index ?? 0;\n  const after = md.slice(start + m[0].length);\n  const next = after.search(/^###\\s+|^##\\s+/m);\n  return next >= 0 ? after.slice(0, next).trim() : after.trim();\n}\nfunction escapeRegExp(s: string) { return s.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); }\n\nfunction parseFirstTable(sectionMd: string): { headers: string[]; rows: string[][] } | null {\n  // Find first GitHub-style table: header, separator, then rows; lines must start with '|'\n  const lines = sectionMd.split('\\n');\n  let i = 0;\n  for (; i < lines.length; i++) {\n    if (/^\\s*\\|.*\\|\\s*$/.test(lines[i]) && i + 1 < lines.length && /^\\s*\\|?\\s*:?-{3,}/.test(lines[i + 1])) {\n      break;\n    }\n  }\n  if (i >= lines.length - 1) return null;\n\n  const headerLine = trimPipes(lines[i]);\n  const headers = headerLine.split('|').map(h => h.trim());\n  i += 2; // skip the separator line\n\n  const rows: string[][] = [];\n  for (; i < lines.length; i++) {\n    const line = lines[i];\n    if (!/^\\s*\\|.*\\|\\s*$/.test(line)) {\n      if (line.trim() === '') continue; else break;\n    } else {\n      const cells = trimPipes(line).split('|').map(c => c.trim());\n      // pad/truncate to headers length\n      while (cells.length < headers.length) cells.push('');\n      rows.push(cells.slice(0, headers.length));\n    }\n  }\n  return { headers, rows };\n}\n\nfunction parseExecutiveSummary(sec: string) {\n  const out: Record<string, string> = {};\n  const lines = sec.split('\\n').map(l => l.trim()).filter(Boolean);\n  for (const ln of lines) {\n    const m = ln.match(/^\\*\\*([^*]+):\\*\\*\\s*(.+)$/);\n    if (m) out[m[1].trim()] = m[2].trim();\n  }\n  const startDateISO = toISO(out['Start Date'] || '');\n  const endDateISO = toISO((out['End Date'] || '').replace(/\\(.*?\\)\\s*/,''));\n  const duration = out['Duration'] || '';\n  const scheduleRisk = (out['Schedule Risk'] || '').replace(/\\s*-\\s*/,' — ');\n  const approach = out['Approach'] || '';\n  return { startDateISO, endDateISO, duration, scheduleRisk, approach };\n}\n\nfunction parseSprintSchedule(sec: string): Sprint[] {\n  const tbl = parseFirstTable(sec);\n  if (!tbl) return [];\n  const map = hdrMap(tbl.headers);\n  return tbl.rows.map(r => ({\n    id: r[map('ID')] || '',\n    name: r[map('Sprint Name')] || '',\n    startISO: toISO(r[map('Start Date')] || ''),\n    endISO: toISO(r[map('End Date')] || ''),\n    focus: r[map('Focus')] || ''\n  }));\n}\n\nfunction hdrMap(headers: string[]) {\n  const normHdrs = headers.map(h => h.toLowerCase());\n  return (label: string) => {\n    const idx = normHdrs.indexOf(label.toLowerCase());\n    return idx >= 0 ? idx : -1;\n  };\n}\n\nfunction parseMilestones(sec: string): Milestone[] {\n  const tbl = parseFirstTable(sec);\n  if (!tbl) return [];\n  const map = hdrMap(tbl.headers);\n  return tbl.rows.map(r => ({\n    id: r[map('ID')] || '',\n    name: r[map('Milestone')] || '',\n    dateISO: toISO(r[map('Date')] || ''),\n    deliverables: splitCsvLike((r[map('Deliverables')] || '').replace(/<br\\s*\\/?>/gi, ', '))\n  }));\n}\n\nfunction parseGates(sec: string): Gate[] {\n  const tbl = parseFirstTable(sec);\n  if (!tbl) return [];\n  const map = hdrMap(tbl.headers);\n  return tbl.rows.map(r => ({\n    id: r[map('ID')] || '',\n    name: r[map('Gate')] || '',\n    dateISO: toISO(r[map('Date')] || ''),\n    exitCriteria: (r[map('Exit Criteria')] || '')\n      .replace(/<br\\s*\\/?>/gi, '\\n')\n      .split('\\n')\n      .map(x => x.trim())\n      .filter(Boolean)\n  }));\n}\n\nfunction parseTasks(sec: string): Task[] {\n  const tbl = parseFirstTable(sec);\n  if (!tbl) return [];\n  const map = hdrMap(tbl.headers);\n  return tbl.rows.map(r => {\n    const id = (r[map('ID')] || '').toUpperCase();\n    const title = r[map('Task')] || '';\n    const phase = parseInt(r[map('Phase')] || '0', 10) || 0;\n    const sprintId = r[map('Sprint')] || '';\n    const ownerRole = r[map('Owner Role')] || '';\n    const effortHours = parseNumberCell(r[map('Effort (h)')] || '0');\n    const depsRaw = r[map('Dependencies')] || '';\n    // Expand ranges: \"T1-T8\" → T1..T8\n    const depsParts = depsRaw.split(/[,+]/).map(x => x.trim()).filter(Boolean);\n    const deps: string[] = [];\n    for (const p of depsParts) deps.push(...parseIdList(p));\n    return { id, title, phase, sprintId, ownerRole, effortHours, dependencies: Array.from(new Set(deps)) };\n  });\n}\n\nfunction parseCriticalPath(sec: string): { paths: string[][] } {\n  const lines = sec.split('\\n').map(l => l.trim()).filter(l => /^\\d+\\./.test(l));\n  const paths: string[][] = [];\n  for (const ln of lines) {\n    const afterNum = ln.replace(/^\\d+\\.\\s*/, '');\n    if (/parallel path/i.test(afterNum)) {\n      const m = afterNum.match(/:\\s*(.+)$/i);\n      const right = m ? m[1] : afterNum;\n      // split on arrow, and also split slash groups \"T21/T22\"\n      const steps = right.split(/→/).map(s => s.trim()).filter(Boolean);\n      const expanded: string[] = [];\n      for (const st of steps) {\n        if (st.includes('/')) expanded.push(...st.split('/').map(x => x.trim()));\n        else expanded.push(st);\n      }\n      paths.push(expanded.map(x => x.toUpperCase()));\n    } else {\n      const steps = afterNum.split(/→/).map(s => s.trim()).filter(Boolean);\n      paths.push(steps.map(x => x.toUpperCase()));\n    }\n  }\n  return { paths };\n}\n\nfunction parseResourcePlan(sec: string): ResourceRow[] {\n  const tbl = parseFirstTable(sec);\n  if (!tbl) return [];\n  const map = hdrMap(tbl.headers);\n  return tbl.rows.map(r => {\n    const role = r[map('Role')] || '';\n    const hoursBySprint: Record<string, number> = {};\n    for (const hdr of tbl.headers) {\n      const m = hdr.match(/^S(\\d+)\\s*\\(h\\)/i);\n      if (m) hoursBySprint[`S${m[1]}`] = parseNumberCell(r[map(hdr)] || '0');\n    }\n    const totalHours = parseNumberCell(r[map('Total (h)')] || '0');\n    const capacity = r[map('Capacity (h)')] ? parseNumberCell(r[map('Capacity (h)')]) : null;\n    const utilPct = r[map('Utilization')] ? parseNumberCell(r[map('Utilization')]) : null;\n    return { role, hoursBySprint, totalHours, capacityHours: capacity, utilizationPct: utilPct };\n  });\n}\n\nfunction parseRisks(sec: string): Risk[] {\n  const tbl = parseFirstTable(sec);\n  if (!tbl) return [];\n  const map = hdrMap(tbl.headers);\n  return tbl.rows.map(r => ({\n    id: r[map('ID')] || '',\n    risk: r[map('Risk')] || '',\n    impact: r[map('Impact')] || '',\n    probability: r[map('Probability')] || '',\n    mitigation: r[map('Mitigation')] || ''\n  }));\n}\n\nfunction parseComms(sec: string): Comms[] {\n  const tbl = parseFirstTable(sec);\n  if (!tbl) return [];\n  const map = hdrMap(tbl.headers);\n  return tbl.rows.map(r => ({\n    type: r[map('Type')] || '',\n    frequency: r[map('Frequency')] || '',\n    participants: splitCsvLike(r[map('Participants')] || ''),\n    purpose: r[map('Purpose')] || ''\n  }));\n}\n\nfunction parseNumberedList(sec: string): string[] {\n  return sec.split('\\n')\n    .map(l => l.trim())\n    .filter(l => /^\\d+\\.\\s+/.test(l))\n    .map(l => l.replace(/^\\d+\\.\\s+/, '').trim());\n}\n\nfunction parseCutover(sec: string): { preGoLive: string[]; goLive: string[]; postGoLive: string[] } {\n  const pre = findSubSection(sec, 'Pre-Go-Live') || findSubSection(sec, 'Pre-Go Live') || '';\n  const day = findSubSection(sec, 'Go-Live Day') || findSubSection(sec, 'Go Live Day') || '';\n  const post = findSubSection(sec, 'Post-Go-Live') || findSubSection(sec, 'Post Go-Live') || '';\n  return {\n    preGoLive: parseNumberedList(pre),\n    goLive: parseNumberedList(day),\n    postGoLive: parseNumberedList(post)\n  };\n}\n\nexport const code = async (inputs: any) => {\n  const warnings: string[] = [];\n  const md = norm(toStr(inputs?.planMd || ''));\n  if (!md.trim()) {\n    return { ok: false, error: 'Empty planMd input. Map planMd → {{15.Execution plan}}.' };\n  }\n\n  // Title (H1)\n  const h1m = md.match(/^#\\s+(.+?)\\s*$/m);\n  const title = h1m ? h1m[1].trim() : 'Execution Plan';\n\n  // Overview text (plain)\n  const overview = findSection(md, 'Project Overview').replace(/^\\s+|\\s+$/g, '');\n\n  // Sections\n  const execSec = findSection(md, 'Executive Summary');\n  const sprintsSec = findSection(md, 'Sprint Schedule');\n  const milestonesSec = findSection(md, 'Milestones');\n  const gatesSec = findSection(md, 'Quality Gates');\n  const tasksSec = findSection(md, 'Tasks');\n  const cpSec = findSection(md, 'Critical Path');\n  const resSec = findSection(md, 'Resource Plan');\n  const risksSec = findSection(md, 'Risks and Mitigations');\n  const commsSec = findSection(md, 'Communication Plan');\n  const cutoverSec = findSection(md, 'Cutover Plan');\n  const openQSec = findSection(md, 'Open Questions');\n  const assumptionsSec = findSection(md, 'Assumptions');\n\n  // Parse parts\n  const executiveSummary = execSec ? parseExecutiveSummary(execSec) : { startDateISO: '', endDateISO: '', duration: '', scheduleRisk: '', approach: '' };\n  const sprints = parseSprintSchedule(sprintsSec);\n  const milestones = parseMilestones(milestonesSec);\n  const gates = parseGates(gatesSec);\n  const tasks = parseTasks(tasksSec);\n  const criticalPath = parseCriticalPath(cpSec);\n  const resourcePlan = parseResourcePlan(resSec);\n  const risks = parseRisks(risksSec);\n  const communicationPlan = parseComms(commsSec);\n  const cutover = parseCutover(cutoverSec);\n  const openQuestions = parseNumberedList(openQSec);\n  const assumptions = parseNumberedList(assumptionsSec);\n\n  // Stats\n  const stats = { taskCount: tasks.length, sprintCount: sprints.length, riskCount: risks.length };\n\n  // Basic sanity warnings\n  if (!sprints.length) warnings.push('No sprints parsed.');\n  if (!tasks.length) warnings.push('No tasks parsed.');\n  if (!milestones.length) warnings.push('No milestones parsed.');\n  if (!gates.length) warnings.push('No quality gates parsed.');\n  if (!resourcePlan.length) warnings.push('No resource plan parsed.');\n\n  return {\n    ok: true,\n    title,\n    overview,\n    executiveSummary,\n    sprints,\n    milestones,\n    gates,\n    tasks,\n    criticalPath,\n    resourcePlan,\n    risks,\n    communicationPlan,\n    cutover,\n    openQuestions,\n    assumptions,\n    stats,\n    warnings\n  };\n};\n",
                                      "packageJson": "{}"
                                    },
                                    "propertySettings": {
                                      "planMd": {
                                        "type": "MANUAL"
                                      }
                                    },
                                    "sampleDataSettings": {
                                      "lastTestDate": "2025-08-28T01:50:22.029Z",
                                      "sampleDataFileId": "NwnNDziWfSMGm675813Tu"
                                    },
                                    "errorHandlingOptions": {
                                      "retryOnFailure": {
                                        "value": true
                                      },
                                      "continueOnFailure": {
                                        "value": false
                                      }
                                    }
                                  },
                                  "nextAction": {
                                    "name": "step_3",
                                    "skip": false,
                                    "type": "PIECE",
                                    "valid": true,
                                    "settings": {
                                      "input": {
                                        "auth": "{{connections['VjH6uUcTOrNRdBiYWarN9']}}",
                                        "text": "Juan Cotizador ha terminado de preparar una cotización para {{step_7['nombre_cliente']}} {{step_7['apellido_cliente']}} {{step_12['outputUrl']}}",
                                        "channel": "C096JQX0PNE"
                                      },
                                      "pieceName": "@activepieces/piece-slack",
                                      "actionName": "send_channel_message",
                                      "pieceVersion": "~0.9.5",
                                      "propertySettings": {
                                        "auth": {
                                          "type": "MANUAL"
                                        },
                                        "text": {
                                          "type": "MANUAL"
                                        },
                                        "channel": {
                                          "type": "MANUAL"
                                        }
                                      },
                                      "sampleDataSettings": {
                                        "lastTestDate": "2025-08-27T13:20:23.254Z",
                                        "sampleDataFileId": "mEHyXDNFyxu1EZOYMfRC2"
                                      },
                                      "errorHandlingOptions": {
                                        "retryOnFailure": {
                                          "value": true
                                        },
                                        "continueOnFailure": {
                                          "value": false
                                        }
                                      }
                                    },
                                    "nextAction": {
                                      "name": "step_11",
                                      "skip": false,
                                      "type": "PIECE",
                                      "valid": true,
                                      "settings": {
                                        "input": {
                                          "auth": "{{connections['9NXu5l3MoKkruSp1AhEbt']}}",
                                          "values": {
                                            "A": "{{step_7['nombre_cliente']}}",
                                            "B": "{{step_7['apellido_cliente']}}",
                                            "C": "{{step_7['empresa_cliente']}}",
                                            "D": "{{step_7['email_cliente']}}",
                                            "E": "{{step_14['Solicitud']}}",
                                            "F": "{{step_17['current_date']}}",
                                            "G": "{{step_14['Presupuesto']}}",
                                            "H": "{{step_14['TechStack']}}",
                                            "I": "{{step_14['HorasEstimadas']}}",
                                            "J": "{{step_14['Plazo']}}",
                                            "K": "{{step_14['CostoDeProduccion']}}"
                                          },
                                          "sheetId": 0,
                                          "as_string": false,
                                          "spreadsheetId": "1JpNaALQOdaft_dv9US4ED6CgN1rnpOMAenRZ57BcyiU",
                                          "first_row_headers": true,
                                          "includeTeamDrives": false
                                        },
                                        "pieceName": "@activepieces/piece-google-sheets",
                                        "actionName": "insert_row",
                                        "pieceVersion": "~0.12.10",
                                        "propertySettings": {
                                          "auth": {
                                            "type": "MANUAL"
                                          },
                                          "values": {
                                            "type": "MANUAL"
                                          },
                                          "sheetId": {
                                            "type": "MANUAL"
                                          },
                                          "as_string": {
                                            "type": "MANUAL"
                                          },
                                          "spreadsheetId": {
                                            "type": "MANUAL"
                                          },
                                          "first_row_headers": {
                                            "type": "MANUAL"
                                          },
                                          "includeTeamDrives": {
                                            "type": "MANUAL"
                                          }
                                        },
                                        "sampleDataSettings": {
                                          "lastTestDate": "2025-08-27T13:20:43.734Z",
                                          "sampleDataFileId": "4dzwl4FwI9uoIuThNlVCl"
                                        },
                                        "errorHandlingOptions": {
                                          "retryOnFailure": {
                                            "value": true
                                          },
                                          "continueOnFailure": {
                                            "value": false
                                          }
                                        }
                                      },
                                      "nextAction": {
                                        "name": "step_16",
                                        "skip": false,
                                        "type": "PIECE",
                                        "valid": true,
                                        "settings": {
                                          "input": {
                                            "cc": [],
                                            "bcc": [],
                                            "auth": "{{connections['5fzRIc3J1ulrSw0AhXhRW']}}",
                                            "body": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Project Brief Notification</title>\n    <style>\n        /* General Styles */\n        body {\n            margin: 0;\n            padding: 0;\n            -webkit-text-size-adjust: 100%;\n            width: 100% !important;\n            background-color: #f4f7f6;\n            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol';\n            color: #333333;\n        }\n\n\n        /* Main Container */\n        .container {\n            width: 100%;\n            max-width: 600px;\n            margin: 0 auto;\n            padding: 20px;\n        }\n\n\n        /* Card Styles */\n        .card {\n            background-color: #ffffff;\n            border-radius: 12px;\n            padding: 30px;\n            border: 1px solid #e0e0e0;\n            box-shadow: 0 4px 15px rgba(0,0,0,0.05);\n        }\n\n\n        /* Header */\n        .header {\n            text-align: center;\n            padding-bottom: 20px;\n            border-bottom: 1px solid #eeeeee;\n            margin-bottom: 20px;\n        }\n        .header h1 {\n            margin: 0;\n            font-size: 24px;\n            color: #1a202c;\n        }\n\n\n        /* Details Section */\n        .details-table {\n            width: 100%;\n            border-collapse: collapse;\n            margin-bottom: 30px;\n        }\n        .details-table td {\n            padding: 12px 0;\n            font-size: 16px;\n            border-bottom: 1px solid #f0f0f0;\n        }\n        .details-table td.label {\n            font-weight: 600;\n            color: #555555;\n            width: 120px; /* Fixed width for labels */\n        }\n        .details-table tr:last-child td {\n            border-bottom: none;\n        }\n\n\n        /* Execution Plan Section */\n        .execution-plan {\n            margin-top: 20px;\n        }\n        .execution-plan h2 {\n            font-size: 20px;\n            color: #1a202c;\n            border-bottom: 2px solid #3498db;\n            padding-bottom: 8px;\n            margin-bottom: 20px;\n        }\n        /* Styles for Markdown content */\n        .markdown-content {\n            font-size: 15px;\n            line-height: 1.6;\n            color: #4a4a4a;\n            white-space: pre-wrap; /* Ensures markdown formatting is respected */\n            word-wrap: break-word;\n        }\n        .markdown-content h1, .markdown-content h2, .markdown-content h3 {\n             color: #2c3e50;\n             margin-top: 24px;\n             margin-bottom: 12px;\n             line-height: 1.3;\n        }\n        .markdown-content ul {\n            padding-left: 20px;\n        }\n        .markdown-content li {\n            margin-bottom: 8px;\n        }\n        .markdown-content p {\n            margin-bottom: 12px;\n        }\n        .markdown-content strong {\n            color: #333;\n        }\n\n\n        /* Footer */\n        .footer {\n            text-align: center;\n            margin-top: 30px;\n            font-size: 12px;\n            color: #999999;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <div class=\"card\">\n            <div class=\"header\">\n                <h1>New Project Brief</h1>\n            </div>\n\n\n            <!-- Key Project Details -->\n            <table class=\"details-table\">\n                <tr>\n                    <td class=\"label\">Cliente:</td>\n                    <td>{{step_14.Nombre}} {{step_14.Apellido}}</td>\n                </tr>\n                <tr>\n                    <td class=\"label\">Empresa:</td>\n                    <td>{{step_14.Empresa}}</td>\n                </tr>\n                <tr>\n                    <td class=\"label\">Tech Stack:</td>\n                    <td>{{step_14.TechStack}}</td>\n                </tr>\n                <tr>\n                    <td class=\"label\">Horas:</td>\n                    <td>{{step_14.HorasEstimadas}}</td>\n                </tr>\n                <tr>\n                    <td class=\"label\">Plazo:</td>\n                    <td>{{step_14.Plazo}} Meses</td>\n                </tr>\n            </table>\n\n\n            <!-- Execution Plan -->\n            <div class=\"execution-plan\">\n                <h2>Plan de Ejecución</h2>\n                <div class=\"markdown-content\">\n                    {{step_14.ExecutionPlanMarkdown}} \n                </div>\n            </div>\n        </div>\n        <div class=\"footer\">\n            <p>This is an automated notification.</p>\n        </div>\n    </div>\n</body>\n</html>",
                                            "draft": false,
                                            "subject": "Plan de Trabajo para {{step_14['Empresa']}} | {{step_14['Fecha']}}",
                                            "receiver": [
                                              "gonzalo@menatech.cloud"
                                            ],
                                            "reply_to": [],
                                            "body_type": "html",
                                            "attachments": [
                                              {
                                                "file": "{{step_12['outputUrl']}}",
                                                "name": "{{step_12['outputName']}}"
                                              }
                                            ]
                                          },
                                          "pieceName": "@activepieces/piece-gmail",
                                          "actionName": "send_email",
                                          "pieceVersion": "~0.9.3",
                                          "propertySettings": {
                                            "cc": {
                                              "type": "MANUAL"
                                            },
                                            "bcc": {
                                              "type": "MANUAL"
                                            },
                                            "auth": {
                                              "type": "MANUAL"
                                            },
                                            "body": {
                                              "type": "MANUAL"
                                            },
                                            "draft": {
                                              "type": "MANUAL"
                                            },
                                            "subject": {
                                              "type": "MANUAL"
                                            },
                                            "receiver": {
                                              "type": "MANUAL"
                                            },
                                            "reply_to": {
                                              "type": "MANUAL"
                                            },
                                            "body_type": {
                                              "type": "MANUAL"
                                            },
                                            "attachments": {
                                              "type": "MANUAL"
                                            }
                                          },
                                          "sampleDataSettings": {},
                                          "errorHandlingOptions": {
                                            "retryOnFailure": {
                                              "value": true
                                            },
                                            "continueOnFailure": {
                                              "value": false
                                            }
                                          }
                                        },
                                        "displayName": "Send Email"
                                      },
                                      "displayName": "Insert Row"
                                    },
                                    "displayName": "Send Message To A Channel"
                                  },
                                  "displayName": "Plan parsing"
                                },
                                "displayName": "Execution Plan"
                              },
                              "displayName": "Convert HTML to PDF"
                            },
                            "displayName": "HTML Parsing"
                          },
                          "displayName": "HTML FORMAT"
                        },
                        "displayName": "Client's Proposal"
                      },
                      "displayName": "The Agency & Market View"
                    },
                    "displayName": "The Community & Analyst View"
                  },
                  "displayName": "Industry AI Challenges"
                },
                "displayName": "Work Plan Parsing"
              },
              "displayName": "Work Plan"
            },
            "displayName": "Current Date"
          },
          "displayName": "Client's Data"
        },
        "displayName": "Respond on UI"
      }
    },
    "valid": true,
    "agentIds": [],
    "connectionIds": [
      "7UyEOcBImqZK15GkB3YUF",
      "dJic7sC9QvWAHp8kER1cK",
      "HRSnRdbU15DnXlhDmUKqW",
      "LDbbwG2U6G4wEftStQmfe",
      "bQWH152xxXZeib1hfesWI",
      "VjH6uUcTOrNRdBiYWarN9",
      "9NXu5l3MoKkruSp1AhEbt",
      "5fzRIc3J1ulrSw0AhXhRW"
    ],
    "schemaVersion": "7"
  },
  "blogUrl": ""
}